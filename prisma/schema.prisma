// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String
  phone           String?     @unique
  email           String?     @unique
  avatar          String?
  tokens          Token[]
  Product         Product[]
  Favorite        Favorite[]
  Post            Post[]
  answer          Answer[]
  WonderToo       WonderToo[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  Trade           Trade[]
  Stream          Stream[]
  Message         Message[]
}

model Token {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
}

model Product {
  Id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  image     String
  name      String
  price     Int
  desc      String     @db.MediumText
  Favorite  Favorite[]
  Trade     Trade[]

  @@index([userId])
}

model Favorite {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [Id], onDelete: Cascade)
  userId    Int
  productId Int

  @@index([userId])
  @@index([productId])
}

model Post {
  Id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  category  String
  latitude  Float?
  longitude Float?
  answer    Answer[]
  wonderToo WonderToo[]

  @@index([userId])
}

model Answer {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [Id], onDelete: Cascade)
  userId    Int
  postId    Int
  answer    String

  @@index([userId])
  @@index([postId])
}

model WonderToo {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [Id], onDelete: Cascade)
  userId    Int
  postId    Int

  @@index([userId])
  @@index([postId])
}

model Review {
  Id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  rating       Int      @default(1)
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdById  Int
  createdForId Int

  @@index([createdById])
  @@index([createdForId])
}

model Trade {
  Id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product     @relation(fields: [productId], references: [Id], onDelete: Cascade)
  userId    Int
  productId Int
  kind      KindofTrade

  @@index([userId])
  @@index([productId])
}

enum KindofTrade {
  PURCHASE
  SALE
}

model Stream {
  Id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  message     Message[]

  @@index([userId])
}

model Message {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [Id], onDelete: Cascade)
  streamId  Int
  chat      String   @db.MediumText

  @@index([userId])
  @@index([streamId])
}
